using System.Diagnostics;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace ObsWebSocket.Net.Analyzer;

[Generator]
public class ObsWebSocketSourceGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
    }

    public void Execute(GeneratorExecutionContext context)
    {
        var enums = context.Compilation.SyntaxTrees.SelectMany(syntaxTree =>
            syntaxTree.GetRoot().DescendantNodes().OfType<EnumDeclarationSyntax>()).ToArray();
        Debug.Assert(enums != null, nameof(enums) + " != null");

        var eventTypes = enums.First(syntax => syntax.Identifier.Text == "EventType");
        if (eventTypes != null) ProcessEventTypes(context, eventTypes);

        var requestTypes = enums.First(syntax => syntax.Identifier.Text == "RequestType");
        if (requestTypes != null) ProcessRequestTypes(context, requestTypes);
    }

    private static void ProcessEventTypes(GeneratorExecutionContext context, EnumDeclarationSyntax eventTypes)
    {
        ProcessEventDelegates(context, eventTypes);
        ProcessEventHandlers(context, eventTypes);
    }

    private static void ProcessEventDelegates(GeneratorExecutionContext context, EnumDeclarationSyntax eventTypes)
    {
        var sb = new StringBuilder();
        sb.AppendLine(@"// <auto-generated/>
#nullable enable
using ObsWebSocket.Net.Events;

namespace ObsWebSocket.Net;
");
        foreach (var type in eventTypes.Members.Select(member => member.Identifier.Text))
        {
            sb.Append("public delegate void ");
            sb.Append(type);
            sb.Append("Handler");
            if (type != "ExitStarted")
            {
                sb.Append("(");
                sb.Append(type);
                sb.Append(" e)");
            }
            else
            {
                sb.Append("()");
            }

            sb.AppendLine(";");
        }

        sb.AppendLine(@"
public sealed partial class ObsWebSocketClient
{
#pragma warning disable CS0067");
        foreach (var type in eventTypes.Members.Select(member => member.Identifier.Text))
        {
            sb.Append("    public event ");
            sb.Append(type);
            sb.Append("Handler? On");
            sb.Append(type);
            sb.AppendLine(";");
        }

        sb.AppendLine(@"#pragma warning restore CS0067
}");
        context.AddSource("ObsWebSocketClient_EventDelegates.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
    }

    private static void ProcessEventHandlers(GeneratorExecutionContext context, EnumDeclarationSyntax eventTypes)
    {
        var sb = new StringBuilder();
        var json = new StringBuilder();
        var msgpack = new StringBuilder();

        sb.AppendLine(@"// <auto-generated/>
#nullable enable
using System.Text.Json;
using MessagePack;
using ObsWebSocket.Net.Enums;
using ObsWebSocket.Net.Events;
using JsonEvent = ObsWebSocket.Net.Messages.Json.Event;
using MsgPackEvent = ObsWebSocket.Net.Messages.MsgPack.Event;

namespace ObsWebSocket.Net;

public sealed partial class ObsWebSocketClient
{");
        json.AppendLine(@"    private partial void HandleEvents(in JsonEvent evt)
    {
        switch(evt.EventType)
        {");
        msgpack.AppendLine(@"
    private partial void HandleEvents(in MsgPackEvent evt)
    {
        switch(evt.EventType)
        {");
        foreach (var type in eventTypes.Members.Select(member => member.Identifier.Text))
        {
            json.Append("            case EventType.");
            json.Append(type);
            json.AppendLine(":");
            json.Append("                On");
            json.Append(type);
            msgpack.Append("            case EventType.");
            msgpack.Append(type);
            msgpack.AppendLine(":");
            msgpack.Append("                On");
            msgpack.Append(type);
            if (type != "ExitStarted")
            {
                json.Append("?.Invoke(evt.EventData.Deserialize<");
                json.Append(type);
                json.AppendLine(">());");
                msgpack.Append("?.Invoke(MessagePackSerializer.Deserialize<");
                msgpack.Append(type);
                msgpack.AppendLine(">(MessagePackSerializer.Serialize(evt.EventData)));");
            }
            else
            {
                json.AppendLine("?.Invoke();");
                msgpack.AppendLine("?.Invoke();");
            }


            json.AppendLine("                break;");
            msgpack.AppendLine("                break;");
        }

        json.AppendLine("            default: break;");
        json.AppendLine("        }");
        json.AppendLine("    }");
        msgpack.AppendLine("            default: break;");
        msgpack.AppendLine("        }");
        msgpack.AppendLine("    }");
        sb.Append(json);
        sb.Append(msgpack);
        sb.AppendLine("}");
        context.AddSource("ObsWebSocketClient_Events.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
    }

    private static void ProcessRequestTypes(GeneratorExecutionContext context, EnumDeclarationSyntax requestTypes)
    {
        ProcessRequest(context, requestTypes);
        ProcessDeserializeRequestResponse(context, requestTypes);
    }

    private static void ProcessRequest(GeneratorExecutionContext context, EnumDeclarationSyntax requestTypes)
    {
        var structs = context.Compilation.SyntaxTrees.SelectMany(syntaxTree =>
            syntaxTree.GetRoot().DescendantNodes().OfType<StructDeclarationSyntax>()).ToArray();

        var sb = new StringBuilder();

        var newRequest = new StringBuilder();
        sb.AppendLine(@"// <auto-generated/>
#nullable enable
using ObsWebSocket.Net.Enums;
using ObsWebSocket.Net.Enums.Obs;
using ObsWebSocket.Net.Internal;
using ObsWebSocket.Net.Requests;

namespace ObsWebSocket.Net;

public static class ObSWebSocketExtensions
{");
        foreach (var type in requestTypes.Members.Select(member => member.Identifier.Text))
        {
            newRequest.Clear();
            sb.Append("    public static ");
            var request = structs.FirstOrDefault(s => s.Identifier.Text == type);
            var response = structs.FirstOrDefault(s => s.Identifier.Text == type + "Response");
            var hasRequest = request != null;
            var hasResponse = response != null;
            if (hasResponse)
            {
                sb.Append("Task<");
                sb.Append(type);
                sb.Append("Response> ");
                sb.Append(type);
            }
            else
            {
                sb.Append("void ");
                sb.Append(type);
            }

            sb.Append("(this ObsWebSocketClient client");
            if (hasRequest)
            {
                newRequest.Append(", new ");
                newRequest.Append(type);
                newRequest.Append(" { ");
                foreach (var property in request!.Members.Cast<PropertyDeclarationSyntax>())
                {
                    var parameterName = property.Identifier.Text.Substring(0, 1).ToLower() +
                                        property.Identifier.Text.Substring(1, property.Identifier.Text.Length - 1);
                    sb.Append(",");
                    sb.Append(property.Type);
                    sb.Append(" ");
                    sb.Append(parameterName);
                    newRequest.Append(property.Identifier.Text);
                    newRequest.Append(" = ");
                    newRequest.Append(parameterName);
                    newRequest.Append(", ");
                }

                newRequest.Append(" }");
            }

            sb.AppendLine(")");

            sb.AppendLine("    {");
            if (hasResponse)
            {
                sb.Append("        return client.Invoke<");
                sb.Append(type);
                sb.Append("Response>(RequestType.");
            }
            else
            {
                sb.Append("        client.Send(RequestType.");
            }

            sb.Append(type);
            sb.Append(newRequest);
            sb.AppendLine(");");
            sb.AppendLine("    }");
        }

        sb.AppendLine("}");
        context.AddSource("ObSWebSocketExtensions.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
    }

    private static void ProcessDeserializeRequestResponse(GeneratorExecutionContext context,
        EnumDeclarationSyntax requestTypes)
    {
        var structs = context.Compilation.SyntaxTrees.SelectMany(syntaxTree =>
            syntaxTree.GetRoot().DescendantNodes().OfType<StructDeclarationSyntax>()).ToArray();

        var sb = new StringBuilder();
        var json = new StringBuilder();
        var msgpack = new StringBuilder();
        sb.AppendLine(@"// <auto-generated/>
#nullable enable
using System.Text.Json;
using MessagePack;
using ObsWebSocket.Net.Enums;
using ObsWebSocket.Net.Requests;
using JsonRequestResponse = ObsWebSocket.Net.Messages.Json.RequestResponse;
using MsgPackRequestResponse = ObsWebSocket.Net.Messages.MsgPack.RequestResponse;

namespace ObsWebSocket.Net;

public sealed partial class ObsWebSocketClient
{");
        json.AppendLine(
            @"    private static partial object? DeserializeRequestResponse(in JsonRequestResponse response)
    {
        if (response.ResponseData == null) return null;
        switch(response.RequestType)
        {");
        msgpack.AppendLine(@"
    private static partial object? DeserializeRequestResponse(in MsgPackRequestResponse response)
    {
        if (response.ResponseData == null) return null;
        switch(response.RequestType)
        {");
        foreach (var type in requestTypes.Members.Select(member => member.Identifier.Text))
        {
            var response = structs.FirstOrDefault(s => s.Identifier.Text == type + "Response");
            json.Append("            case RequestType.");
            json.Append(type);
            json.AppendLine(":");
            msgpack.Append("            case RequestType.");
            msgpack.Append(type);
            msgpack.AppendLine(":");
            if (response == null)
            {
                json.AppendLine("                return null;");
                msgpack.AppendLine("                return null;");
            }
            else
            {
                json.Append("                return response.ResponseData.Deserialize<");
                json.Append(type);
                json.AppendLine("Response>();");
                msgpack.Append("                return MessagePackSerializer.Deserialize<");
                msgpack.Append(type);
                msgpack.AppendLine("Response>(MessagePackSerializer.Serialize(response.ResponseData));");
            }
        }

        json.AppendLine("            default: return null;");
        json.AppendLine("        }");
        json.AppendLine("    }");
        msgpack.AppendLine("            default: return null;");
        msgpack.AppendLine("        }");
        msgpack.AppendLine("    }");
        sb.Append(json);
        sb.Append(msgpack);
        sb.AppendLine("}");
        context.AddSource("ObsWebSocketClient_RequestResponse.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
    }
}