using System;
using System.Diagnostics;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace ObsWebSocket.Net.Analyzer
{
    [Generator]
    public class EventHandlerGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
        }

        public void Execute(GeneratorExecutionContext context)
        {
            var enums = context.Compilation.SyntaxTrees.SelectMany(syntaxTree =>
                syntaxTree.GetRoot().DescendantNodes().OfType<EnumDeclarationSyntax>()).ToArray();
            Debug.Assert(enums != null, nameof(enums) + " != null");

            var sb = new StringBuilder();

            var eventTypes = enums.First(syntax => syntax.Identifier.Text == "EventType");
            if (eventTypes != null)
            {
                ProcessEventTypes(context, eventTypes);
            }

            var requestTypes = enums.First(syntax => syntax.Identifier.Text == "RequestType");
            if (requestTypes != null)
            {
                ProcessRequestTypes(context, requestTypes);
            }
        }

        private static void ProcessEventTypes(GeneratorExecutionContext context, EnumDeclarationSyntax eventTypes)
        {
            ProcessEventDelegates(context, eventTypes);
            ProcessEventHandlers(context, eventTypes);
        }

        private static void ProcessEventDelegates(GeneratorExecutionContext context, EnumDeclarationSyntax eventTypes)
        {
            var sb = new StringBuilder();
            sb.AppendLine(@"// <auto-generated/>
#nullable enable
using ObsWebSocket.Net.Events;

namespace ObsWebSocket.Net;
");
            foreach (var type in eventTypes.Members.Select(member => member.Identifier.Text))
            {
                sb.Append("public delegate void ");
                sb.Append(type);
                sb.Append("Handler");
                if (type != "ExitStarted")
                {
                    sb.Append("(");
                    sb.Append(type);
                    sb.Append(" e)");
                }
                else
                {
                    sb.Append("()");
                }

                sb.AppendLine(";");
            }

            sb.AppendLine(@"
public sealed partial class ObsWebSocketClient
{
#pragma warning disable CS0067");
            foreach (var type in eventTypes.Members.Select(member => member.Identifier.Text))
            {
                sb.Append("    public event ");
                sb.Append(type);
                sb.Append("Handler? On");
                sb.Append(type);
                sb.AppendLine(";");
            }

            sb.AppendLine(@"#pragma warning restore CS0067
}");
            context.AddSource("ObsWebSocketClient_EventDelegates.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
        }

        private static void ProcessEventHandlers(GeneratorExecutionContext context, EnumDeclarationSyntax eventTypes)
        {
            var sb = new StringBuilder();
            sb.AppendLine(@"// <auto-generated/>
#nullable enable
using System;
using System.Buffers;
using System.Net.WebSockets;
using System.Text.Json;
using MessagePack;
using ObsWebSocket.Net.Enums;
using ObsWebSocket.Net.Events;
using ObsWebSocket.Net.Messages;
using ObsWebSocket.Net.Messages.Json;
using ObsWebSocket.Net.Messages.MsgPack;
using JsonEvent = ObsWebSocket.Net.Messages.Json.Event;
using MsgPackEvent = ObsWebSocket.Net.Messages.MsgPack.Event;

namespace ObsWebSocket.Net;

public sealed partial class ObsWebSocketClient
{
    private partial void HandleEvents(in JsonEvent evt)
    {
        switch(evt.EventType)
        {");
            foreach (var type in eventTypes.Members.Select(member => member.Identifier.Text))
            {
                sb.Append("            case EventType.");
                sb.Append(type);
                sb.AppendLine(":");
                sb.Append("                On");
                sb.Append(type);
                if (type != "ExitStarted")
                {
                    sb.Append("?.Invoke(evt.EventData.Deserialize<");
                    sb.Append(type);
                    sb.AppendLine(">());");
                }
                else
                {
                    sb.AppendLine("?.Invoke();");
                }


                sb.AppendLine("            break;");
            }

            sb.AppendLine("            default: break;");
            sb.AppendLine("        }");
            sb.AppendLine("    }");
            sb.AppendLine(@"
    private partial void HandleEvents(in MsgPackEvent evt)
    {
        switch(evt.EventType)
        {");
            foreach (var type in eventTypes.Members.Select(member => member.Identifier.Text))
            {
                sb.Append("            case EventType.");
                sb.Append(type);
                sb.AppendLine(":");
                sb.Append("                On");
                sb.Append(type);
                if (type != "ExitStarted")
                {
                    sb.Append("?.Invoke(MessagePackSerializer.Deserialize<");
                    sb.Append(type);
                    sb.AppendLine(">(MessagePackSerializer.Serialize(evt.EventData)));");
                }
                else
                {
                    sb.AppendLine("?.Invoke();");
                }


                sb.AppendLine("            break;");
            }

            sb.AppendLine("        }");
            sb.AppendLine("    }");
            sb.AppendLine("}");
            context.AddSource("ObsWebSocketClient_Events.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
        }

        private void ProcessRequestTypes(GeneratorExecutionContext context, EnumDeclarationSyntax requestTypes)
        {
        }
    }
}